local DEFAULT_KEY = "R"
local HOTKEY_TOGGLE = Enum.KeyCode.F6
local GUI_NAME = "AutoCastingHoldRelease_XenoV2"
local BAR_PATH = "PlayerGui.Blindness.Frame.Frame.Bar1" -- ƒê∆Ø·ªúNG D·∫™N BAR C·ªê ƒê·ªäNH

-- ================================================================= --
--                 SERVICES AND LOCAL VARIABLES
-- ================================================================= --

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")
local VIM = game:GetService('VirtualInputManager') -- VirtualInputManager c√≥ th·ªÉ b·ªã ch·∫∑n

pcall(function()
    if CoreGui:FindFirstChild(GUI_NAME) then CoreGui[GUI_NAME]:Destroy() end
end)

local isRunning = false
local mainLoopActive = true
local pressCount = 0
-- inputMode: 1: UserInputService:SimulateKeyPress (Th∆∞·ªùng ·ªïn h∆°n VIM tr√™n c√°c Executor)
--            2: VirtualInputManager (N·∫øu 1 kh√¥ng ch·∫°y, th·ª≠ c√°i n√†y)
--            3: Legacy (Ch·ªâ d√πng khi 1 v√† 2 ho√†n to√†n kh√¥ng ho·∫°t ƒë·ªông)
local inputMode = 1 

-- ================================================================= --
--                 CORE INPUT FUNCTIONS (ƒêA NƒÇNG)
-- ================================================================= --

-- üî• H√†m Gi·∫£ L·∫≠p Nh·∫•n Ph√≠m T·ªëi ∆Øu v√† ƒêa NƒÉng
local function sendKeyEvent(keyName, isDown)
    local keyEnum = Enum.KeyCode[keyName] 
    if not keyEnum then 
        warn("Invalid KeyCode specified:", keyName)
        return false 
    end
    
    local success = pcall(function()
        if inputMode == 1 then
            -- PH∆Ø∆†NG PH√ÅP 1: UserInputService:SimulateKeyPress (Th∆∞·ªùng ho·∫°t ƒë·ªông t·ªët tr√™n nhi·ªÅu Executor)
            local input = Instance.new("InputObject")
            input.UserInputType = Enum.UserInputType.Keyboard
            input.KeyCode = keyEnum
            input.UserInputState = isDown and Enum.UserInputState.Begin or Enum.UserInputState.End
            UserInputService:SimulateKeyPress(input, true)
            
        elseif inputMode == 2 then
            -- PH∆Ø∆†NG PH√ÅP 2: VirtualInputManager (N·∫øu UIS:Simulate kh√¥ng ho·∫°t ƒë·ªông, th·ª≠ c√°i n√†y)
            VIM:SendKeyEvent(isDown, keyEnum, false, game)
            
        elseif inputMode == 3 then
            -- PH∆Ø∆†NG PH√ÅP 3: Legacy Executor Method (N·∫øu 1 v√† 2 kh√¥ng ho·∫°t ƒë·ªông)
            -- ƒê√¢y l√† c√°ch khai th√°c c√°c h√†m ri√™ng c·ªßa Executor, ch·ªâ ho·∫°t ƒë·ªông tr√™n m·ªôt s·ªë Executor nh·∫•t ƒë·ªãnh
            if rawget(_G, "setsimulatorproperty") then
                 setsimulatorproperty(keyName, isDown)
            else
                 -- Quay l·∫°i UIS:Simulate n·∫øu Legacy kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£
                 warn("Legacy method 'setsimulatorproperty' not found. Falling back to UIS:Simulate.")
                 local input = Instance.new("InputObject")
                 input.UserInputType = Enum.UserInputType.Keyboard
                 input.KeyCode = keyEnum
                 input.UserInputState = isDown and Enum.UserInputState.Begin or Enum.UserInputState.End
                 UserInputService:SimulateKeyPress(input, true)
            end
        end
    end)
    
    if not success then
        warn("Failed to send key event using mode", inputMode, "for key", keyName, "isDown:", isDown)
    end
    return success
end

-- ================================================================= --
--                             BAR & PATH LOGIC (Gi·ªØ nguy√™n)
-- ================================================================= --

local function readBarValue(barObject)
    if not barObject then return 0 end
    local ok, val = pcall(function()
        if barObject:IsA("GuiObject") and barObject.Size.X.Scale then
            return barObject.Size.X.Scale 
        end
        return 0
    end)
    return ok and val or 0
end

local function findBarByPath(path)
    if not path or path == "" then return nil end
    local current = game
    for part in path:gmatch("[^%.]+") do
        if part == LocalPlayer.Name and current == game.Players then -- X·ª≠ l√Ω tr∆∞·ªùng h·ª£p "LocalPlayer.Name"
            current = LocalPlayer
        else
            current = current:FindFirstChild(part)
        end
        if not current then return nil end
    end
    return current
end

-- ================================================================= --
--                             GUI SETUP
-- ================================================================= --

local screenGui = Instance.new("ScreenGui")
screenGui.Name = GUI_NAME
screenGui.ResetOnSpawn = false

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 320, 0, 190) -- TƒÉng chi·ªÅu cao
frame.Position = UDim2.new(0.01, 0, 0.1, 0)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BorderSizePixel = 1
frame.BorderColor3 = Color3.fromRGB(60, 60, 60)
frame.Parent = screenGui

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 25)
title.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
title.Text = "Auto-Casting XENO FIX V2 (HOLD/RELEASE)"
title.TextColor3 = Color3.fromRGB(0, 255, 0)
title.Font = Enum.Font.SourceSansBold
title.TextSize = 16
title.Parent = frame

local status = Instance.new("TextLabel")
status.Size = UDim2.new(1, -10, 0, 20)
status.Position = UDim2.new(0, 5, 0, 30)
status.BackgroundTransparency = 1
status.Text = "üî¥ OFF | Key: R | Bar: 0.00"
status.TextColor3 = Color3.fromRGB(200, 200, 200)
status.TextXAlignment = Enum.TextXAlignment.Left
status.Font = Enum.Font.SourceSans
status.TextSize = 14
status.Parent = frame

local modeBtn = Instance.new("TextButton")
modeBtn.Size = UDim2.new(0, 130, 0, 30)
modeBtn.Position = UDim2.new(0, 5, 0, 60)
modeBtn.BackgroundColor3 = Color3.fromRGB(80, 80, 150)
modeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
modeBtn.Text = "Mode 1: UIS Simulate (Default)" -- C·∫≠p nh·∫≠t m·∫∑c ƒë·ªãnh
modeBtn.Font = Enum.Font.SourceSansBold
modeBtn.TextSize = 12
modeBtn.Parent = frame

local toggleBtn = Instance.new("TextButton")
toggleBtn.Size = UDim2.new(0, 100, 0, 30)
toggleBtn.Position = UDim2.new(1, -105, 0, 60)
toggleBtn.AnchorPoint = Vector2.new(1, 0)
toggleBtn.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
toggleBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleBtn.Text = "START (F6)"
toggleBtn.Font = Enum.Font.SourceSansBold
toggleBtn.TextSize = 16
toggleBtn.Parent = frame

local pathLabel = Instance.new("TextLabel")
pathLabel.Size = UDim2.new(1, -10, 0, 20)
pathLabel.Position = UDim2.new(0, 5, 0, 100)
pathLabel.BackgroundTransparency = 1
pathLabel.Text = "Bar Path: " .. BAR_PATH
pathLabel.TextColor3 = Color3.fromRGB(100, 100, 100)
pathLabel.TextSize = 10
pathLabel.TextXAlignment = Enum.TextXAlignment.Left
pathLabel.Parent = frame

local infoLabel = Instance.new("TextLabel")
infoLabel.Size = UDim2.new(1, -10, 0, 40)
infoLabel.Position = UDim2.new(0, 5, 0, 125)
infoLabel.BackgroundTransparency = 1
infoLabel.Text = "Waiting for Bar... Use F6 to toggle."
infoLabel.TextColor3 = Color3.fromRGB(150, 150, 255)
infoLabel.TextSize = 12
infoLabel.TextXAlignment = Enum.TextXAlignment.Left
infoLabel.TextYAlignment = Enum.TextYAlignment.Top
infoLabel.Parent = frame

screenGui.Parent = CoreGui

-- ================================================================= --
--                             MAIN LOGIC
-- ================================================================= --

local function updateUI(barValue)
    local modeText = ""
    if inputMode == 1 then modeText = "Mode 1: UIS Simulate (Default)" end
    if inputMode == 2 then modeText = "Mode 2: VIM (Alt)" end
    if inputMode == 3 then modeText = "Mode 3: Legacy (Old Executor)" end
    
    modeBtn.Text = modeText

    status.Text = string.format("%s | Key: %s | Bar Value: %.2f",
        isRunning and "üü¢ ON" or "üî¥ OFF",
        DEFAULT_KEY,
        barValue
    )
end

local function toggleExecution()
    isRunning = not isRunning
    
    -- N·∫øu d·ª´ng, ƒë·∫£m b·∫£o nh·∫£ ph√≠m
    if not isRunning then
        sendKeyEvent(DEFAULT_KEY, false)
        toggleBtn.Text = "START (F6)"
        toggleBtn.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
        infoLabel.Text = "Stopped. Released " .. DEFAULT_KEY .. " key."
    else
        toggleBtn.Text = "STOP (F6)"
        toggleBtn.BackgroundColor3 = Color3.fromRGB(0, 180, 0)
        infoLabel.Text = "Running... Searching for Bar."
    end
    updateUI(0)
end

toggleBtn.MouseButton1Click:Connect(toggleExecution)

modeBtn.MouseButton1Click:Connect(function()
    inputMode = inputMode % 3 + 1
    updateUI(0)
    infoLabel.Text = "Input Mode changed. Try START/STOP again."
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == HOTKEY_TOGGLE then
        toggleExecution()
    end
end)

task.spawn(function()
    local BarObject = findBarByPath(BAR_PATH)
    
    if not BarObject then
        infoLabel.Text = "üö® Bar NOT found! Check path: " .. BAR_PATH
        return
    end

    infoLabel.Text = "‚úÖ Bar found: " .. BarObject.Name .. ". Ready."

    while mainLoopActive do
        
        if not isRunning then
            task.wait(0.5)
            goto continue_loop
        end

        local barValue = readBarValue(BarObject)
        updateUI(barValue)

        -- 1. CH·ªú BAR ƒê·∫¶Y (S·∫µn s√†ng >= 95%)
        infoLabel.Text = "1. Ch·ªù Bar ƒë·∫ßy (>= 0.95)..."
        local waitStart = tick()
        local maxWaitTime = 5 -- Cooldown kh√¥ng n√™n v∆∞·ª£t qu√° 5s
        
        while barValue < 0.95 and (tick() - waitStart) < maxWaitTime do
            task.wait(0.05)
            barValue = readBarValue(BarObject)
            updateUI(barValue)
        end
        
        if barValue < 0.95 then
             infoLabel.Text = "‚ö†Ô∏è Cooldown qu√° l√¢u (> 5s). B·ªè qua l·∫ßn n√†y."
             sendKeyEvent(DEFAULT_KEY, false) -- ƒê·∫£m b·∫£o nh·∫£ ph√≠m n·∫øu c√≥ l·ª° nh·∫•n
             task.wait(0.5)
             goto continue_loop
        end

        -- 2. NH·∫§N V√Ä GI·ªÆ PH√çM R
        infoLabel.Text = "2. Nh·∫•n v√† Gi·ªØ ph√≠m " .. DEFAULT_KEY .. "..."
        sendKeyEvent(DEFAULT_KEY, true)
        pressCount = pressCount + 1
        
        -- 3. CH·ªú BAR GI·∫¢M V·ªÄ 0 (Thi tri·ªÉn xong)
        local holdStart = tick()
        local maxHoldTime = 2 -- Th·ªùi gian gi·ªØ ph√≠m (Cast Time) kh√¥ng n√™n qu√° 2s
        
        while barValue > 0.05 and (tick() - holdStart) < maxHoldTime do
            task.wait(0.05)
            barValue = readBarValue(BarObject)
            updateUI(barValue)
        end
        
        -- 4. NH·∫¢ PH√çM R
        infoLabel.Text = "4. Nh·∫£ ph√≠m " .. DEFAULT_KEY .. ". Chi√™u ƒë√£ thi tri·ªÉn."
        sendKeyEvent(DEFAULT_KEY, false)
        
        -- 5. CH·ªú COOLDOWN NG·∫ÆN (ƒê·∫£m b·∫£o game nh·∫≠n di·ªán ho√†n t·∫•t)
        task.wait(0.1) -- M·ªôt kho·∫£ng ch·ªù nh·ªè sau khi nh·∫£ ph√≠m ƒë·ªÉ game x·ª≠ l√Ω
        infoLabel.Text = string.format("5. Ch·ªù Cooldown (Total Presses: %d).", pressCount)
        
        -- Ch·ªù m·ªôt kho·∫£ng th·ªùi gian nh·ªè tr∆∞·ªõc khi l·∫∑p l·∫°i, ƒë·ªÉ tr√°nh flood
        task.wait(0.1) 

        ::continue_loop::
    end
end)

-- Cleanup
LocalPlayer.AncestryChanged:Connect(function()
    mainLoopActive = false
    sendKeyEvent(DEFAULT_KEY, false) -- ƒê·∫£m b·∫£o nh·∫£ ph√≠m khi script b·ªã h·ªßy
    pcall(function() screenGui:Destroy() end)
    print("Auto-Casting XENO FIX V2 script cleaned up.")
end)

print("Auto-Casting XENO FIX V2 loaded. Please try different Input Modes if the key press isn't working.")
