-- ‚úÖ Safe Auto Fruit Script by NTBA

-- ‚è≥ ƒê·ª£i game load
if not game:IsLoaded() then
    game.Loaded:Wait()
end

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local vim_ = game:GetService("VirtualInputManager") -- D√πng bi·∫øn tr√°nh b·ªã ph√°t hi·ªán

local player = Players.LocalPlayer
local character = player:WaitForChild("Character")
local playerGui = player:WaitForChild("PlayerGui")

-- ‚öôÔ∏è Tr·∫°ng th√°i c√°c toggle
local settings = {
    autofruit = false,
    z = false,
    x = false,
    c = false,
    v = false,
    haki = false
}

-- üß± GUI Setup
local gui = Instance.new("ScreenGui")
gui.Name = "CoreUI" -- ƒê·∫∑t t√™n kh√¥ng g√¢y nghi ng·ªù
gui.ResetOnSpawn = false
gui.Parent = playerGui

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 200, 0, 340)
frame.Position = UDim2.new(0, 20, 0, 100)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BorderSizePixel = 0
frame.Parent = gui

local uilist = Instance.new("UIListLayout", frame)
uilist.Padding = UDim.new(0, 5)
uilist.FillDirection = Enum.FillDirection.Vertical
uilist.SortOrder = Enum.SortOrder.LayoutOrder

-- üè∑ T√°c gi·∫£ label
local authorLabel = Instance.new("TextLabel", frame)
authorLabel.Size = UDim2.new(1, -10, 0, 25)
authorLabel.Position = UDim2.new(0, 5, 0, 0)
authorLabel.BackgroundTransparency = 1
authorLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
authorLabel.Font = Enum.Font.SourceSansBold
authorLabel.TextSize = 18
authorLabel.Text = "T√°c gi·∫£: NTBA"

-- üîΩ N√∫t thu g·ªçn
local toggleButton = Instance.new("TextButton", frame)
toggleButton.Size = UDim2.new(1, -10, 0, 30)
toggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.Font = Enum.Font.SourceSansBold
toggleButton.TextSize = 16
toggleButton.Text = "Thu g·ªçn üîΩ"

local isMinimized = false
local toggleElements = {}

-- üîò T·∫°o n√∫t Toggle
local function createToggle(name)
    local btn = Instance.new("TextButton", frame)
    btn.Size = UDim2.new(1, -10, 0, 40)
    btn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    btn.TextColor3 = Color3.fromRGB(255, 255, 255)
    btn.Font = Enum.Font.SourceSansBold
    btn.TextSize = 18
    btn.Text = name .. ": OFF"

    table.insert(toggleElements, btn)

    btn.MouseButton1Click:Connect(function()
        local key = name:lower()
        settings[key] = not settings[key]
        btn.Text = name .. ": " .. (settings[key] and "ON" or "OFF")
        btn.BackgroundColor3 = settings[key] and Color3.fromRGB(60, 120, 60) or Color3.fromRGB(50, 50, 50)
    end)
end

-- üß© T·∫°o c√°c n√∫t
createToggle("AutoFruit")
createToggle("Z")
createToggle("X")
createToggle("C")
createToggle("V")
createToggle("Haki")

-- üì¶ Thu g·ªçn b·∫£ng
toggleButton.MouseButton1Click:Connect(function()
    isMinimized = not isMinimized
    toggleButton.Text = isMinimized and "M·ªü r·ªông ‚ñ∂" or "Thu g·ªçn üîΩ"
    for _, element in pairs(toggleElements) do
        element.Visible = not isMinimized
    end
end)

-- ‚å®Ô∏è B·∫≠t/T·∫Øt GUI b·∫±ng ph√≠m Ctrl ph·∫£i
gui.Enabled = true
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.RightControl then
        gui.Enabled = not gui.Enabled
    end
end)

-- üîÅ Loop Auto Key Press (ch·ªëng spam, ch·ªëng band)
task.spawn(function()
    while true do
        task.wait(1.2 + math.random(0, 3)/10) -- delay t·ª´ 1.2 ƒë·∫øn 1.5s (random ho√°)

        if settings.autofruit then
            local function pressKey(key)
                vim_:SendKeyEvent(true, key, false, game)
                task.wait(0.05)
                vim_:SendKeyEvent(false, key, false, game)
            end

            if settings.haki then pressKey(Enum.KeyCode.R) end
            if settings.z then pressKey(Enum.KeyCode.Z) end
            if settings.x then pressKey(Enum.KeyCode.X) end
            if settings.c then pressKey(Enum.KeyCode.C) end
            if settings.v then pressKey(Enum.KeyCode.V) end
        end
    end
end)
